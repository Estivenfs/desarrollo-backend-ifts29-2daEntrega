doctype html
html(lang='es')
  head
    meta(charset='UTF-8')
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    title Gestión de Turnos
    style.
      body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        color: #333;
      }
      .container {
        background: white;
        padding: 40px;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        backdrop-filter: blur(10px);
      }
      h1 {
        color: #4a5568;
        text-align: center;
        margin-bottom: 30px;
        font-size: 2.5em;
      }
      .back-button {
        display: inline-block;
        background: #718096;
        color: white;
        padding: 10px 20px;
        text-decoration: none;
        border-radius: 5px;
        margin-bottom: 20px;
        transition: background 0.3s ease;
      }
      .back-button:hover {
        background: #4a5568;
        color: white;
        text-decoration: none;
      }
      .actions {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin: 30px 0;
      }
      .action-button {
        display: block;
        padding: 20px;
        text-decoration: none;
        border-radius: 10px;
        text-align: center;
        font-weight: bold;
        font-size: 1.1em;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        color: white;
      }
      .action-button:hover {
        transform: translateY(-2px);
        color: white;
        text-decoration: none;
      }
      .create {
        background: linear-gradient(135deg, #48bb78, #38a169);
        box-shadow: 0 4px 15px rgba(72, 187, 120, 0.3);
      }
      .create:hover {
        box-shadow: 0 6px 20px rgba(72, 187, 120, 0.4);
      }
      .read {
        background: linear-gradient(135deg, #4299e1, #3182ce);
        box-shadow: 0 4px 15px rgba(66, 153, 225, 0.3);
      }
      .read:hover {
        box-shadow: 0 6px 20px rgba(66, 153, 225, 0.4);
      }
      .update {
        background: linear-gradient(135deg, #ed8936, #dd6b20);
        box-shadow: 0 4px 15px rgba(237, 137, 54, 0.3);
      }
      .update:hover {
        box-shadow: 0 6px 20px rgba(237, 137, 54, 0.4);
      }
      .delete {
        background: linear-gradient(135deg, #f56565, #e53e3e);
        box-shadow: 0 4px 15px rgba(245, 101, 101, 0.3);
      }
      .delete:hover {
        box-shadow: 0 6px 20px rgba(245, 101, 101, 0.4);
      }
      .icon {
        font-size: 2em;
        display: block;
        margin-bottom: 10px;
      }
      .form-section {
        background: #f7fafc;
        padding: 20px;
        border-radius: 10px;
        margin: 20px 0;
        display: none;
      }
      .form-section.active {
        display: block;
      }
      .form-group {
        margin-bottom: 15px;
      }
      .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
        color: #2d3748;
      }
      .form-group input, .form-group select {
        width: 100%;
        padding: 10px;
        border: 1px solid #cbd5e0;
        border-radius: 5px;
        font-size: 16px;
      }
      .form-group input:focus, .form-group select:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
      }
      .submit-button {
        background: #667eea;
        color: white;
        padding: 12px 24px;
        border: none;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
        transition: background 0.3s ease;
      }
      .submit-button:hover {
        background: #5a67d8;
      }
      .result {
        background: #edf2f7;
        padding: 15px;
        border-radius: 5px;
        margin-top: 15px;
        display: none;
      }
      .result.success {
        background: #f0fff4;
        border-left: 4px solid #48bb78;
      }
      .result.error {
        background: #fed7d7;
        border-left: 4px solid #f56565;
      }
      .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
      }
  body
    .container
      a.back-button(href='/') ← Volver al Inicio
      
      h1 📅 Gestión de Turnos
      
      .actions
        a.action-button.create(href='#' onclick='showForm("create")')
          span.icon ➕
          | Crear Turno
        
        a.action-button.read(href='#' onclick='showForm("read")')
          span.icon 👁️
          | Consultar Turnos
        
        a.action-button.update(href='#' onclick='showForm("update")')
          span.icon ✏️
          | Modificar Turno
        
        a.action-button.delete(href='#' onclick='showForm("delete")')
          span.icon 🗑️
          | Eliminar Turno
      
      // Formulario Crear Turno
      .form-section#create-form
        h3 ➕ Crear Nuevo Turno
        form(onsubmit='createTurno(event)')
          .form-group
            label(for='fecha') Fecha:
            input(type='date' id='fecha' name='fecha' required)
          .form-row
            .form-group
              label(for='horaInicio') Hora de Inicio:
              input(type='time' id='horaInicio' name='horaInicio' required)
            .form-group
              label(for='horaFin') Hora de Fin:
              input(type='time' id='horaFin' name='horaFin' required)
          .form-group
            label(for='idPaciente') Paciente:
            select(id='idPaciente' name='idPaciente' required)
              option(value='') Seleccionar paciente...
          .form-group
            label(for='idMedico') Médico:
            select(id='idMedico' name='idMedico' required)
              option(value='') Seleccionar médico...
          button.submit-button(type='submit') Crear Turno
        .result#create-result
      
      // Formulario Consultar Turnos
      .form-section#read-form
        h3 👁️ Consultar Turnos
        button.submit-button(onclick='getAllTurnos()') Ver Todos los Turnos
        .form-group
          label(for='searchFecha') Buscar por Fecha:
          input(type='date' id='searchFecha' name='searchFecha')
          button.submit-button(onclick='getTurnosByFecha()') Buscar
        .form-group
          label(for='searchPaciente') Buscar por Paciente:
          select(id='searchPaciente' name='searchPaciente')
            option(value='') Seleccionar paciente...
          button.submit-button(onclick='getTurnosByPaciente()') Buscar
        .form-group
          label(for='searchMedico') Buscar por Médico:
          select(id='searchMedico' name='searchMedico')
            option(value='') Seleccionar médico...
          button.submit-button(onclick='getTurnosByMedico()') Buscar
        .result#read-result
      
      // Formulario Modificar Turno
      .form-section#update-form
        h3 ✏️ Modificar Turno
        .form-group
          label(for='updateTurnoSelect') Seleccionar Turno:
          select(id='updateTurnoSelect' name='updateTurnoSelect' required)
            option(value='') Seleccionar turno...
          button.submit-button(onclick='loadTurnoData()') Cargar Datos
        form(onsubmit='updateTurno(event)' style='display:none' id='update-data-form')
          .form-group
            label(for='updateFecha') Fecha:
            input(type='date' id='updateFecha' name='updateFecha' required)
          .form-row
            .form-group
              label(for='updateHoraInicio') Hora de Inicio:
              input(type='time' id='updateHoraInicio' name='updateHoraInicio' required)
            .form-group
              label(for='updateHoraFin') Hora de Fin:
              input(type='time' id='updateHoraFin' name='updateHoraFin' required)
          .form-group
            label(for='updateIdPaciente') Paciente:
            select(id='updateIdPaciente' name='updateIdPaciente' required)
              option(value='') Seleccionar paciente...
          .form-group
            label(for='updateIdMedico') Médico:
            select(id='updateIdMedico' name='updateIdMedico' required)
              option(value='') Seleccionar médico...
          button.submit-button(type='submit') Actualizar Turno
        .result#update-result
      
      // Formulario Eliminar Turno
      .form-section#delete-form
        h3 🗑️ Eliminar Turno
        .form-group
          label(for='deleteId') ID del Turno:
          input(type='number' id='deleteId' name='deleteId' required)
          button.submit-button(onclick='deleteTurno()') Eliminar Turno
        .result#delete-result

    script.
      let pacientes = [];
      let medicos = [];

      // Cargar datos iniciales
      window.onload = function() {
        loadPacientes();
        loadMedicos();
        setMinDateTime();
        loadTurnosDropdown('updateTurnoSelect');
      };

      function setMinDateTime() {
        const today = new Date().toISOString().split('T')[0];
        const fechaInputs = ['fecha', 'updateFecha'];
        fechaInputs.forEach(id => {
          const input = document.getElementById(id);
          if (input) {
            input.min = today;
          }
        });
      }

      function validateDateTime(fecha, hora) {
        if (!fecha || !hora) return true; // Si no están completos, no validar aquí
        
        const fechaHoraTurno = new Date(`${fecha}T${hora}:00`);
        const ahora = new Date();
        
        return fechaHoraTurno > ahora;
      }

      async function loadPacientes() {
        try {
          const response = await fetch('/api/pacientes');
          const result = await response.json();
          if (response.ok) {
            pacientes = result.data;
            updatePacienteSelects();
          }
        } catch (error) {
          console.error('Error cargando pacientes:', error);
        }
      }

      async function loadMedicos() {
        try {
          const response = await fetch('/api/medicos');
          const result = await response.json();
          if (response.ok) {
            medicos = result.data;
            updateMedicoSelects();
          }
        } catch (error) {
          console.error('Error cargando médicos:', error);
        }
      }

      function updatePacienteSelects() {
        const selects = ['idPaciente', 'searchPaciente', 'updateIdPaciente'];
        selects.forEach(selectId => {
          const select = document.getElementById(selectId);
          if (select) {
            // Mantener la opción por defecto
            const defaultOption = select.querySelector('option[value=""]');
            select.innerHTML = '';
            if (defaultOption) {
              select.appendChild(defaultOption);
            }
            
            pacientes.forEach(paciente => {
              const option = document.createElement('option');
              option.value = paciente._id;
              option.textContent = `${paciente.Nombre} ${paciente.Apellido} (DNI: ${paciente.DNI})`;
              select.appendChild(option);
            });
          }
        });
      }

      function updateMedicoSelects() {
        const selects = ['idMedico', 'searchMedico', 'updateIdMedico'];
        selects.forEach(selectId => {
          const select = document.getElementById(selectId);
          if (select) {
            // Mantener la opción por defecto
            const defaultOption = select.querySelector('option[value=""]');
            select.innerHTML = '';
            if (defaultOption) {
              select.appendChild(defaultOption);
            }
            
            medicos.forEach(medico => {
              const option = document.createElement('option');
              option.value = medico._id;
              option.textContent = `${medico.Nombre} ${medico.Apellido} (${medico.Especialidad})`;
              select.appendChild(option);
            });
          }
        });
      }

      function showForm(formType) {
        // Ocultar todos los formularios
        const forms = document.querySelectorAll('.form-section');
        forms.forEach(form => form.classList.remove('active'));
        
        // Mostrar el formulario seleccionado
        document.getElementById(formType + '-form').classList.add('active');
        
        // Limpiar resultados
        const results = document.querySelectorAll('.result');
        results.forEach(result => {
          result.style.display = 'none';
          result.innerHTML = '';
        });
      }

      function showResult(elementId, message, isSuccess = true) {
        const result = document.getElementById(elementId);
        result.innerHTML = message;
        result.className = 'result ' + (isSuccess ? 'success' : 'error');
        result.style.display = 'block';
      }

      async function createTurno(event) {
        event.preventDefault();
        const formData = new FormData(event.target);
        const data = {
          Fecha: formData.get('fecha'),
          HoraInicio: formData.get('horaInicio'),
          HoraFin: formData.get('horaFin'),
          IdPaciente: formData.get('idPaciente'),
          IdMedico: formData.get('idMedico'),
        }
        
        // Validar fecha y hora
        if (!validateDateTime(data.Fecha, data.HoraInicio)) {
          showResult('create-result', '❌ La fecha y hora del turno deben ser posteriores al momento actual', false);
          return;
        }
        
       
        
        try {
          const response = await fetch('/api/turnos', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
          });
          
          const result = await response.json();
          if (response.ok) {
            showResult('create-result', `✅ Turno creado exitosamente. ID: ${result.data._id}`, true);
            event.target.reset();
          } else {
            showResult('create-result', `❌ Error: ${result.message}`, false);
          }
        } catch (error) {
          showResult('create-result', `❌ Error de conexión: ${error.message}`, false);
        }
      }

      async function getAllTurnos() {
        try {
          const response = await fetch('/api/turnos');
          const result = await response.json();
          
          if (response.ok) {
            let html = '<h4>📋 Lista de Turnos:</h4>';
            result.data.forEach(turno => {
              const paciente = pacientes.find(p => p._id === turno.IdPaciente);
              const medico = medicos.find(m => m._id === turno.IdMedico);
              html += `<p><strong>ID:</strong> ${turno._id} | <strong>Fecha:</strong> ${turno.Fecha} | <strong>Hora:</strong> ${turno.HoraInicio}-${turno.HoraFin} | <strong>Paciente:</strong> ${paciente ? paciente.Nombre + ' ' + paciente.Apellido : 'N/A'} | <strong>Médico:</strong> ${medico ? medico.Nombre + ' ' + medico.Apellido : 'N/A'}</p>`;
            });
            showResult('read-result', html, true);
          } else {
            showResult('read-result', `❌ Error: ${result.message}`, false);
          }
        } catch (error) {
          showResult('read-result', `❌ Error de conexión: ${error.message}`, false);
        }
      }

      async function getTurnosByFecha() {
        const fecha = document.getElementById('searchFecha').value;
        if (!fecha) {
          showResult('read-result', '❌ Por favor seleccione una fecha', false);
          return;
        }
        
        try {
          const response = await fetch(`/api/turnos/fecha/${fecha}`);
          const result = await response.json();
          
          if (response.ok) {
            let html = `<h4>📅 Turnos del ${fecha}:</h4>`;
            result.data.forEach(turno => {
              const paciente = pacientes.find(p => p._id === turno.IdPaciente);
              const medico = medicos.find(m => m._id === turno.IdMedico);
              html += `<p><strong>ID:</strong> ${turno._id} | <strong>Hora:</strong> ${turno.HoraInicio}-${turno.HoraFin} | <strong>Paciente:</strong> ${paciente ? paciente.Nombre + ' ' + paciente.Apellido : 'N/A'} | <strong>Médico:</strong> ${medico ? medico.Nombre + ' ' + medico.Apellido : 'N/A'}</p>`;
            });
            showResult('read-result', html, true);
          } else {
            showResult('read-result', `❌ Error: ${result.message}`, false);
          }
        } catch (error) {
          showResult('read-result', `❌ Error de conexión: ${error.message}`, false);
        }
      }

      async function getTurnosByPaciente() {
        const idPaciente = document.getElementById('searchPaciente').value;
        if (!idPaciente) {
          showResult('read-result', '❌ Por favor seleccione un paciente', false);
          return;
        }
        
        try {
          const response = await fetch(`/api/turnos/paciente/${idPaciente}`);
          const result = await response.json();
          
          if (response.ok) {
            const paciente = pacientes.find(p => p._id == idPaciente);
            let html = `<h4>🏥 Turnos de ${paciente ? paciente.Nombre + ' ' + paciente.Apellido : 'Paciente'}:</h4>`;
            result.data.forEach(turno => {
              const medico = medicos.find(m => m._id === turno.IdMedico);
              html += `<p><strong>ID:</strong> ${turno._id} | <strong>Fecha:</strong> ${turno.Fecha} | <strong>Hora:</strong> ${turno.HoraInicio}-${turno.HoraFin} | <strong>Médico:</strong> ${medico ? medico.Nombre + ' ' + medico.Apellido : 'N/A'}</p>`;
            });
            showResult('read-result', html, true);
          } else {
            showResult('read-result', `❌ Error: ${result.message}`, false);
          }
        } catch (error) {
          showResult('read-result', `❌ Error de conexión: ${error.message}`, false);
        }
      }

      async function getTurnosByMedico() {
        const idMedico = document.getElementById('searchMedico').value;
        if (!idMedico) {
          showResult('read-result', '❌ Por favor seleccione un médico', false);
          return;
        }
        
        try {
          const response = await fetch(`/api/turnos/medico/${idMedico}`);
          const result = await response.json();
          
          if (response.ok) {
            const medico = medicos.find(m => m._id == idMedico);
            let html = `<h4>👨‍⚕️ Turnos de ${medico ? medico.Nombre + ' ' + medico.Apellido : 'Médico'}:</h4>`;
            result.data.forEach(turno => {
              const paciente = pacientes.find(p => p._id === turno.IdPaciente);
              html += `<p><strong>ID:</strong> ${turno._id} | <strong>Fecha:</strong> ${turno.Fecha} | <strong>Hora:</strong> ${turno.HoraInicio}-${turno.HoraFin} | <strong>Paciente:</strong> ${paciente ? paciente.Nombre + ' ' + paciente.Apellido : 'N/A'}</p>`;
            });
            showResult('read-result', html, true);
          } else {
            showResult('read-result', `❌ Error: ${result.message}`, false);
          }
        } catch (error) {
          showResult('read-result', `❌ Error de conexión: ${error.message}`, false);
        }
      }

      async function loadTurnoData() {
        const id = document.getElementById('updateId').value;
        if (!id) {
          showResult('update-result', '❌ Por favor ingrese un ID', false);
          return;
        }
        
        try {
          const response = await fetch(`/api/turnos/${id}`);
          const result = await response.json();
          
          if (response.ok) {
            const t = result.data;
            document.getElementById('updateFecha').value = t.Fecha;
            document.getElementById('updateHoraInicio').value = t.HoraInicio;
            document.getElementById('updateHoraFin').value = t.HoraFin;
            document.getElementById('updateIdPaciente').value = t.IdPaciente;
            document.getElementById('updateIdMedico').value = t.IdMedico;
            
            document.getElementById('update-data-form').style.display = 'block';
            showResult('update-result', '✅ Datos cargados correctamente', true);
          } else {
            showResult('update-result', `❌ Error: ${result.message}`, false);
          }
        } catch (error) {
          showResult('update-result', `❌ Error de conexión: ${error.message}`, false);
        }
      }

      async function loadTurnosDropdown(idSelect) {
        try {
          const response = await fetch('/api/turnos');
          const result = await response.json();
          let turnos = result.data;
          //agrego a turnos los nombres de medicos y pacientes
          turnos.forEach(turno => {
            const medico = medicos.find(m => m._id === turno.IdMedico);
            const paciente = pacientes.find(p => p._id === turno.IdPaciente);
            turno.NombreMedico = medico ? medico.Nombre + ' ' + medico.Apellido : 'N/A';
            turno.NombrePaciente = paciente ? paciente.Nombre + ' ' + paciente.Apellido : 'N/A';
          });
          console.log(turnos);
          
          if (response.ok) {
            const select = document.getElementById(idSelect);
            select.innerHTML = '<option value="">Seleccionar turno...</option>';
            
            turnos.forEach(turno => {
              const option = document.createElement('option');
              option.value = turno._id;
              option.textContent = `${turno.Fecha} ${turno.HoraInicio}-${turno.HoraFin} ${turno.NombreMedico} - ${turno.NombrePaciente}`;
              select.appendChild(option);
            });
          }
        } catch (error) {
          console.error('Error cargando turnos:', error);
        }
      }

      async function updateTurno(event) {
        event.preventDefault();
        const id = document.getElementById('updateId').value;
        const formData = new FormData(event.target);
        const data = {
          Fecha: formData.get('updateFecha'),
          HoraInicio: formData.get('updateHoraInicio'),
          HoraFin: formData.get('updateHoraFin'),
          IdPaciente: formData.get('updateIdPaciente'),
          IdMedico: formData.get('updateIdMedico')
        }
        
        // Validar fecha y hora
        if (!validateDateTime(data.Fecha, data.HoraInicio)) {
          showResult('update-result', '❌ La fecha y hora del turno deben ser posteriores al momento actual', false);
          return;
        }
        
        // Convertir IDs a números
        data.IdPaciente = parseInt(data.IdPaciente);
        data.IdMedico = parseInt(data.IdMedico);
        
        try {
          const response = await fetch(`/api/turnos/${id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
          });
          
          const result = await response.json();
          if (response.ok) {
            showResult('update-result', '✅ Turno actualizado exitosamente', true);
          } else {
            showResult('update-result', `❌ Error: ${result.message}`, false);
          }
        } catch (error) {
          showResult('update-result', `❌ Error de conexión: ${error.message}`, false);
        }
      }

      async function deleteTurno() {
        const id = document.getElementById('deleteId').value;
        if (!id) {
          showResult('delete-result', '❌ Por favor ingrese un ID', false);
          return;
        }
        
        if (!confirm('¿Está seguro de que desea eliminar este turno?')) {
          return;
        }
        
        try {
          const response = await fetch(`/api/turnos/${id}`, {
            method: 'DELETE'
          });
          
          const result = await response.json();
          if (response.ok) {
            showResult('delete-result', '✅ Turno eliminado exitosamente', true);
            document.getElementById('deleteId').value = '';
          } else {
            showResult('delete-result', `❌ Error: ${result.message}`, false);
          }
        } catch (error) {
          showResult('delete-result', `❌ Error de conexión: ${error.message}`, false);
        }
      }
doctype html
html(lang='es')
  head
    meta(charset='UTF-8')
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    title= title
    link(rel='stylesheet', href='https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap')
    link(rel='stylesheet', href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css')
    style.
      /* --- Estilos Base del Dashboard (Layout) --- */
      body {
        font-family: 'Inter', sans-serif;
        margin: 0;
        padding: 24px;
        background: linear-gradient(135deg, #f6fbff, #e9f6ff);
        color: #0f4c81;
        display: flex;
        min-height: 100vh;
      }

      .sidebar {
        width: 80px;
        background: linear-gradient(180deg, rgba(6,40,60,0.95), rgba(5,34,54,0.95));
        color: white;
        border-radius: 12px;
        padding: 20px 12px;
        display:flex;
        flex-direction: column;
        align-items: center;
        gap: 18px;
        box-shadow: 0 12px 30px rgba(2,6,23,0.12);
        position: sticky;
        top: 24px;
        height: calc(100vh - 48px);
      }

      .logo {
        width: 44px;
        height: 44px;
        border-radius: 10px;
        background: linear-gradient(135deg,#0b74b6,#0b4fa0);
        display:flex;
        align-items:center;
        justify-content:center;
        font-weight:700;
      }

      .sidebar nav a {
        width: 52px;
        height: 52px;
        border-radius: 10px;
        display:flex;
        align-items:center;
        justify-content:center;
        color: rgba(255,255,255,0.9);
        text-decoration: none;
        font-size: 1.2em;
        transition: transform .18s ease, box-shadow .18s ease;
      }
      .sidebar nav a:hover {
        transform: translateY(-6px);
        box-shadow: 0 10px 26px rgba(4,30,60,0.28);
      }

      .main {
        flex: 1;
        margin-left: 24px;
      }

      .container {
        background: rgba(255,255,255,0.75);
        padding: 28px;
        border-radius: 16px;
        box-shadow: 0 14px 40px rgba(2,6,23,0.08);
      }
      
      .header-left {
        display: flex;
        align-items: center;
        gap: 12px;
        margin-bottom: 12px;
      }
      .header-left i {
        font-size: 1.9rem;
        color: #0f4c81;
      }
      .header-left h1 {
        font-size: 1.9rem;
        margin: 4px 0;
      }
      .page-sub {
        margin: 0;
        color: #5b7f98;
      }

      /* --- Estilos Específicos de Pacientes (Fusionados) --- */
      .actions {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin: 30px 0;
      }
      .action-button {
        display: block;
        padding: 20px;
        text-decoration: none;
        border-radius: 10px;
        text-align: center;
        font-weight: bold;
        font-size: 1.1em;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        color: white;
      }
      .action-button:hover {
        transform: translateY(-2px);
        color: white;
        text-decoration: none;
      }
      .action-button .icon { /* Estilo para el ícono dentro del botón */
        font-size: 2em;
        display: block;
        margin-bottom: 10px;
      }
      .create {
        background: linear-gradient(135deg, #48bb78, #38a169);
        box-shadow: 0 4px 15px rgba(72, 187, 120, 0.3);
      }
      .create:hover {
        box-shadow: 0 6px 20px rgba(72, 187, 120, 0.4);
      }
      .read {
        background: linear-gradient(135deg, #4299e1, #3182ce);
        box-shadow: 0 4px 15px rgba(66, 153, 225, 0.3);
      }
      .read:hover {
        box-shadow: 0 6px 20px rgba(66, 153, 225, 0.4);
      }
      .update {
        background: linear-gradient(135deg, #ed8936, #dd6b20);
        box-shadow: 0 4px 15px rgba(237, 137, 54, 0.3);
      }
      .update:hover {
        box-shadow: 0 6px 20px rgba(237, 137, 54, 0.4);
      }
      .delete {
        background: linear-gradient(135deg, #f56565, #e53e3e);
        box-shadow: 0 4px 15px rgba(245, 101, 101, 0.3);
      }
      .delete:hover {
        box-shadow: 0 6px 20px rgba(245, 101, 101, 0.4);
      }
      .form-section {
        background: #f7fafc;
        padding: 20px;
        border-radius: 10px;
        margin: 20px 0;
        display: none;
        border: 1px solid rgba(12,50,80,0.04);
      }
      .form-section h3 {
        display: flex;
        align-items: center;
        gap: 10px;
        color: #2d3748;
      }
      .form-section.active {
        display: block;
      }
      .form-group {
        margin-bottom: 15px;
      }
      .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
        color: #2d3748;
      }
      .form-group input, .form-group select {
        width: 100%;
        padding: 10px;
        border: 1px solid #cbd5e0;
        border-radius: 5px;
        font-size: 16px;
      }
      .form-group input:focus, .form-group select:focus {
        outline: none;
        border-color: #0b74b6;
        box-shadow: 0 0 0 3px rgba(11, 116, 182, 0.1);
      }
      .submit-button {
        background: #0b74b6;
        color: white;
        padding: 12px 24px;
        border: none;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
        transition: background 0.3s ease;
      }
      .submit-button:hover {
        background: #0b4fa0;
      }
      .result {
        background: #edf2f7;
        padding: 15px;
        border-radius: 5px;
        margin-top: 15px;
        display: none;
      }
      .result i { /* Estilo para íconos en resultados */
        margin-right: 8px;
      }
      .result.success {
        background: #f0fff4;
        border-left: 4px solid #48bb78;
        color: #2f855a;
      }
      .result.success i {
        color: #48bb78;
      }
      .result.error {
        background: #fed7d7;
        border-left: 4px solid #f56565;
        color: #c53030;
      }
      .result.error i {
        color: #f56565;
      }


  body
    .sidebar
      .logo SI
      nav
        a(href='/' title='Inicio')
          i.fas.fa-house
        a(href='/pacientes' title='Pacientes')
          i.fas.fa-user-injured
        a(href='/medicos' title='Médicos')
          i.fas.fa-user-md
        a(href='/turnos' title='Turnos')
          i.fas.fa-calendar-check

    .main
      .container
        // --- Cabecera con ícono ---
        .header-left
          i.fas.fa-user-injured
          div
            h1.page-title Gestión de Pacientes
            p.page-sub Desarrollo Backend - Grupo 4
        
        // --- Contenido de la página de Pacientes con íconos ---
        .actions
          a.action-button.create(href='#' onclick='showForm("create")')
            i.icon.fas.fa-plus-circle
            | Crear Paciente
          
          a.action-button.read(href='#' onclick='showForm("read")')
            i.icon.fas.fa-search
            | Consultar Pacientes
          
          a.action-button.update(href='#' onclick='showForm("update")')
            i.icon.fas.fa-edit
            | Modificar Paciente
          
          a.action-button.delete(href='#' onclick='showForm("delete")')
            i.icon.fas.fa-trash-alt
            | Eliminar Paciente
        
        // Formulario Crear Paciente
        .form-section#create-form
          h3
            i.fas.fa-plus-circle
            | Crear Nuevo Paciente
          form(onsubmit='createPaciente(event)')
            .form-group
              label(for='nombre') Nombre:
              input(type='text' id='nombre' name='nombre' required)
            .form-group
              label(for='apellido') Apellido:
              input(type='text' id='apellido' name='apellido' required)
            .form-group
              label(for='dni') DNI:
              input(type='text' id='dni' name='dni' required)
            .form-group
              label(for='edad') Edad:
              input(type='number' id='edad' name='edad' required min='0' max='120')
            .form-group
              label(for='sexo') Sexo:
              select(id='sexo' name='sexo' required)
                option(value='') Seleccionar...
                option(value='M') Masculino
                option(value='F') Femenino
            .form-group
              label(for='obraSocial') Obra Social:
              input(type='text' id='obraSocial' name='obraSocial' required)
            .form-group
              label(for='nroAfiliado') Número de Afiliado:
              input(type='text' id='nroAfiliado' name='nroAfiliado' required)
            button.submit-button(type='submit') Crear Paciente
          .result#create-result
        
        // Formulario Consultar Pacientes
        .form-section#read-form
          h3
            i.fas.fa-search
            | Consultar Pacientes
          button.submit-button(onclick='getAllPacientes()') Ver Todos los Pacientes
          .form-group
            label(for='searchDni') Buscar por DNI:
            input(type='text' id='searchDni' name='searchDni' placeholder='Ingrese DNI')
            button.submit-button(onclick='getPacienteByDni()') Buscar
          .result#read-result
        
        // Formulario Modificar Paciente
        .form-section#update-form
          h3
            i.fas.fa-edit
            | Modificar Paciente
          .form-group
            label(for='updatePacienteSelect') Seleccionar Paciente:
            select(id='updatePacienteSelect' name='updatePacienteSelect' required)
              option(value='') Seleccionar paciente...
            button.submit-button(onclick='loadPacienteData()') Cargar Datos
          form(onsubmit='updatePaciente(event)' style='display:none' id='update-data-form')
            .form-group
              label(for='updateNombre') Nombre:
              input(type='text' id='updateNombre' name='updateNombre' required)
            .form-group
              label(for='updateApellido') Apellido:
              input(type='text' id='updateApellido' name='updateApellido' required)
            .form-group
              label(for='updateDni') DNI:
              input(type='text' id='updateDni' name='updateDni' required)
            .form-group
              label(for='updateEdad') Edad:
              input(type='number' id='updateEdad' name='updateEdad' required min='0' max='120')
            .form-group
              label(for='updateSexo') Sexo:
              select(id='updateSexo' name='updateSexo' required)
                option(value='M') Masculino
                option(value='F') Femenino
            .form-group
              label(for='updateObraSocial') Obra Social:
              input(type='text' id='updateObraSocial' name='updateObraSocial' required)
            .form-group
              label(for='updateNroAfiliado') Número de Afiliado:
              input(type='text' id='updateNroAfiliado' name='updateNroAfiliado' required)
            button.submit-button(type='submit') Actualizar Paciente
          .result#update-result
        
        // Formulario Eliminar Paciente
        .form-section#delete-form
          h3
            i.fas.fa-trash-alt
            | Eliminar Paciente
          .form-group
            label(for='deleteId') Seleccionar Paciente:
            select(id='deleteId' name='deleteId' required)
              option(value='') Seleccionar paciente...
            button.submit-button(onclick='deletePaciente()') Eliminar Paciente
          .result#delete-result

    // --- Script modificado para usar íconos ---
    script.
      function showForm(formType) {
        // Ocultar todos los formularios
        const forms = document.querySelectorAll('.form-section');
        forms.forEach(form => form.classList.remove('active'));
        
        // Mostrar el formulario seleccionado
        document.getElementById(formType + '-form').classList.add('active');
        
        // Cargar pacientes en el desplegable si es el formulario de modificar
        if (formType === 'update') {
          loadPacientesDropdown('updatePacienteSelect');
        }
        if (formType === 'delete') {
          loadPacientesDropdown('deleteId');
        }
        
        // Limpiar resultados
        const results = document.querySelectorAll('.result');
        results.forEach(result => {
          result.style.display = 'none';
          result.innerHTML = '';
        });
      }

      function showResult(elementId, message, isSuccess = true) {
        const result = document.getElementById(elementId);
        // Genera el ícono correspondiente en HTML
        const iconHtml = isSuccess ? '<i class="fas fa-check-circle"></i>' : '<i class="fas fa-times-circle"></i>';
        result.innerHTML = `${iconHtml} ${message}`;
        result.className = 'result ' + (isSuccess ? 'success' : 'error');
        result.style.display = 'block';
      }

      async function createPaciente(event) {
        event.preventDefault();
        const formData = new FormData(event.target);
        const data = {
          Nombre: formData.get('nombre'),
          Apellido: formData.get('apellido'),
          DNI: formData.get('dni'),
          Edad: formData.get('edad'),
          Sexo: formData.get('sexo'),
          ObraSocial: formData.get('obraSocial'),
          NroAfiliado: formData.get('nroAfiliado')
        }
        
        try {
          const response = await fetch('/api/pacientes', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
          });
          
          const result = await response.json();
          if (response.ok) {
            const id = result.data._id || result.data.IdPaciente;
            // Mensaje sin emoji
            showResult('create-result', `Paciente creado exitosamente. ID: ${id}`, true);
            event.target.reset();
          } else {
            showResult('create-result', `Error: ${result.message}`, false);
          }
        } catch (error) {
          showResult('create-result', `Error de conexión: ${error.message}`, false);
        }
      }

      async function getAllPacientes() {
        try {
          const response = await fetch('/api/pacientes');
          const result = await response.json();
          
          if (response.ok) {
            // Título con ícono
            let html = '<h4><i class="fas fa-clipboard-list"></i> Lista de Pacientes:</h4>';
            result.data.forEach(paciente => {
              const id = paciente._id || paciente.IdPaciente;
              html += `<p><strong>ID:</strong> ${id} | <strong>Nombre:</strong> ${paciente.Nombre} ${paciente.Apellido} | <strong>DNI:</strong> ${paciente.DNI} | <strong>Obra Social:</strong> ${paciente.ObraSocial}</p>`;
            });
            showResult('read-result', html, true);
          } else {
            showResult('read-result', `Error: ${result.message}`, false);
          }
        } catch (error) {
          showResult('read-result', `Error de conexión: ${error.message}`, false);
        }
      }

      async function getPacienteByDni() {
        const dni = document.getElementById('searchDni').value;
        if (!dni) {
          showResult('read-result', 'Por favor ingrese un DNI', false);
          return;
        }
        
        try {
          const response = await fetch(`/api/pacientes/dni/${dni}`);
          const result = await response.json();
          
          if (response.ok) {
            const p = result.data;
            const id = p._id || p.IdPaciente;
            // Título con ícono
            const html = `<h4><i class="fas fa-user"></i> Paciente Encontrado:</h4>
                         <p><strong>ID:</strong> ${id}</p>
                         <p><strong>Nombre:</strong> ${p.Nombre} ${p.Apellido}</p>
                         <p><strong>DNI:</strong> ${p.DNI}</p>
                         <p><strong>Edad:</strong> ${p.Edad} años</p>
                         <p><strong>Sexo:</strong> ${p.Sexo}</p>
                         <p><strong>Obra Social:</strong> ${p.ObraSocial}</p>
                         <p><strong>Nro. Afiliado:</strong> ${p.NroAfiliado}</p>`;
            showResult('read-result', html, true);
          } else {
            showResult('read-result', `Error: ${result.message}`, false);
          }
        } catch (error) {
          showResult('read-result', `Error de conexión: ${error.message}`, false);
        }
      }

      async function loadPacientesDropdown(idSelect) {
        try {
          const response = await fetch('/api/pacientes');
          const result = await response.json();
          
          if (response.ok) {
            const select = document.getElementById(idSelect);
            select.innerHTML = '<option value="">Seleccionar paciente...</option>';
            
            result.data.forEach(paciente => {
              const id = paciente._id || paciente.IdPaciente;
              const option = document.createElement('option');
              option.value = id;
              option.textContent = `${paciente.Nombre} ${paciente.Apellido} - DNI: ${paciente.DNI}`;
              select.appendChild(option);
            });
          }
        } catch (error) {
          console.error('Error cargando pacientes:', error);
        }
      }

      async function loadPacienteData() {
        const id = document.getElementById('updatePacienteSelect').value;
        if (!id) {
          showResult('update-result', 'Por favor seleccione un paciente', false);
          return;
        }
        
        try {
          const response = await fetch(`/api/pacientes/${id}`);
          const result = await response.json();
          
          if (response.ok) {
            const p = result.data;
            document.getElementById('updateNombre').value = p.Nombre;
            document.getElementById('updateApellido').value = p.Apellido;
            document.getElementById('updateDni').value = p.DNI;
            document.getElementById('updateEdad').value = p.Edad;
            document.getElementById('updateSexo').value = p.Sexo;
            document.getElementById('updateObraSocial').value = p.ObraSocial;
            document.getElementById('updateNroAfiliado').value = p.NroAfiliado;
            
            document.getElementById('update-data-form').style.display = 'block';
            showResult('update-result', 'Datos cargados correctamente', true);
          } else {
            showResult('update-result', `Error: ${result.message}`, false);
          }
        } catch (error) {
          showResult('update-result', `Error de conexión: ${error.message}`, false);
        }
      }

      async function updatePaciente(event) {
        event.preventDefault();
        const id = document.getElementById('updatePacienteSelect').value;
        const formData = new FormData(event.target);
        const data = {
          Nombre: formData.get('updateNombre'),
          Apellido: formData.get('updateApellido'),
          DNI: formData.get('updateDni'),
          Edad: formData.get('updateEdad'),
          Sexo: formData.get('updateSexo'),
          ObraSocial: formData.get('updateObraSocial'),
          NroAfiliado: formData.get('updateNroAfiliado')
        }
        
        try {
          const response = await fetch(`/api/pacientes/${id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
          });
          
          const result = await response.json();
          if (response.ok) {
            showResult('update-result', 'Paciente actualizado exitosamente', true);
          } else {
            showResult('update-result', `Error: ${result.message}`, false);
          }
        } catch (error) {
          showResult('update-result', `Error de conexión: ${error.message}`, false);
        }
      }

      async function deletePaciente() {
        const id = document.getElementById('deleteId').value;
        if (!id) {
          showResult('delete-result', 'Por favor seleccione un paciente', false);
          return;
        }
        
        if (!confirm('¿Está seguro de que desea eliminar este paciente?')) {
          return;
        }
        
        try {
          const response = await fetch(`/api/pacientes/${id}`, {
            method: 'DELETE'
          });
          
          const result = await response.json();
          if (response.ok) {
            showResult('delete-result', 'Paciente eliminado exitosamente', true);
            document.getElementById('deleteId').value = '';
            // Recargar la lista de pacientes en los dropdowns
            loadPacientesDropdown('updatePacienteSelect');
            loadPacientesDropdown('deleteId');
          } else {
            showResult('delete-result', `Error: ${result.message}`, false);
          }
        } catch (error) {
          showResult('delete-result', `Error de conexión: ${error.message}`, false);
        }
      }